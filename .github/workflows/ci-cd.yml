name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      APP_NAME: ecommerce-app
      SERVICE_NAME: user-service
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REGISTRY: 258173133840.dkr.ecr.us-east-1.amazonaws.com
      ECR_REPOSITORY: myapps/${APP_NAME}-repository
      IMAGE_TAG: ${SERVICE_NAME}
      DOCKER_FILE_LOCATION: ./backend/${SERVICE_NAME}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install Dependencies
      run: npm install --prefix $DOCKER_FILE_LOCATION

    # - name: Run Tests
    #   run: npm test --prefix ./backend/user-service

    # Install AWS CLI
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    # Configure AWS Credentials
    - name: Configure AWS Credentials
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region $AWS_REGION  
    
    # Log in to AWS ECR
    - name: Login to AWS
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

    # Build the Docker image
    - name: Build Docker Image
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG $DOCKER_FILE_LOCATION
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Push the Docker image to ECR
    - name: Push Docker Image to Amazon ECR
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Fill in the new image ID in the Amazon ECS task definition
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecommerce-app-task-user-service
        container-name: user-service
        image: ${{ steps.build-image.outputs.image }}

    # Deploy Amazon ECS task definition
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ecommerce-app-user-service
        cluster: ecommerce-app-cluster
        wait-for-service-stability: true