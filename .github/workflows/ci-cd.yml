name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      APP_NAME: ecommerce-app
      SERVICE_NAME: user-service
      AWS_REGION: us-east-1
      ECR_REGISTRY: 258173133840.dkr.ecr.us-east-1.amazonaws.com
      ECR_REPOSITORY: myapps/$APP_NAME-repository
      IMAGE_TAG: $SERVICE_NAME
      DOCKER_FILE_LOCATION: ./backend/$SERVICE_NAME

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install Dependencies
      run: npm install --prefix ./backend/$SERVICE_NAME

    # Install AWS CLI
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    # Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Log in to AWS ECR
    - name: Log in to AWS ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

    # Build the Docker image
    - name: Build Docker Image
      run: |
        docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.DOCKER_FILE_LOCATION }}
        docker tag ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    # Push the Docker image to ECR
    - name: Push Docker Image to Amazon ECR
      run: |
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    # # Fill in the new image ID in the Amazon ECS task definition
    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: $APP_NAME-task-$SERVICE_NAME
    #     container-name: $SERVICE_NAME
    #     image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Create ECS Task Definition Dynamically
    - name: Create ECS Task Definition
      id: task-def
      run: |
        echo '{
          "family": "'${APP_NAME}'-task-'${SERVICE_NAME}'",
          "containerDefinitions": [
              {
                  "name": "'${SERVICE_NAME}'",
                  "image": "'${ECR_REGISTRY}'/'${{ env.ECR_REPOSITORY }}':'${{ env.IMAGE_TAG }}'",
                  "cpu": 0,
                  "portMappings": [
                      {
                          "name": "'${SERVICE_NAME}'-8000-tcp",
                          "containerPort": 8000,
                          "hostPort": 8000,
                          "protocol": "tcp",
                          "appProtocol": "http"
                      }
                  ],
                  "essential": true,
                  "environment": [],
                  "environmentFiles": [],
                  "mountPoints": [],
                  "volumesFrom": [],
                  "ulimits": [],
                  "logConfiguration": {
                      "logDriver": "awslogs",
                      "options": {
                          "awslogs-group": "/ecs/'${APP_NAME}'-task-'${SERVICE_NAME}'",
                          "mode": "non-blocking",
                          "awslogs-create-group": "true",
                          "max-buffer-size": "25m",
                          "awslogs-region": "'${AWS_REGION}'",
                          "awslogs-stream-prefix": "ecs"
                      },
                      "secretOptions": []
                  },
                  "healthCheck": {
                      "command": [
                          "CMD-SHELL",
                          "curl -f http://localhost:8000/health || exit 1"
                      ],
                      "interval": 30,
                      "timeout": 5,
                      "retries": 3
                  },
                  "systemControls": []
              }
          ],
          "executionRoleArn": "arn:aws:iam::258173133840:role/ecsTaskExecutionRole",
          "networkMode": "awsvpc",
          "volumes": [],
          "placementConstraints": [],
          "requiresCompatibilities": [
              "FARGATE"
          ],
          "cpu": "1024",
          "memory": "3072",
          "runtimePlatform": {
              "cpuArchitecture": "X86_64",
              "operatingSystemFamily": "LINUX"
          }
          }' > task-definition.json
          
          echo "TASK_DEFINITION=task-definition.json" >> $GITHUB_ENV
    
    # Debug Task Definition
    - name: Debug Task Definition
      run: |
        echo "Generated Task Definition:"
        cat task-definition.json
    
    # Deploy Amazon ECS task definition
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ env.TASK_DEFINITION }}
        service: ${{ env.APP_NAME }}-${{ env.SERVICE_NAME }}
        cluster: ${{ env.APP_NAME }}-cluster
        wait-for-service-stability: true
